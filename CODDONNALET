#Adjunto el codigo que utilice para crear la imagen en el ensamblador 

;Dibujo de My melody en display 
;Prints a 16x16 sprite into the visual display

       JMP boot

stackTop    EQU 0xFF    ; Initial SP
txtDisplay  EQU 0x2E0

hello:	DB "Hello World!"	; Output string
		DB 0				; String terminator
        
vslDisplay EQU 0x300

sprite: 
    
DB  "\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF"
    DB  "\xFF\xFF\x00\x00\x00\x00\xFF\xFF\xFF\xFF\xFF\x00\xFF\xFF\xFF\xFF"
    DB  "\xFF\x00\xC4\xC4\xC4\xC4\x00\xFF\x00\x00\x00\x00\xFF\xFF\xFF\xFF"
    DB  "\xFF\x00\xC4\xC4\xC4\xC4\xC4\x00\xC4\xC4\xC4\xC4\x00\xFF\xFF\xFF"
    DB  "\xFF\xFF\x00\x00\xC4\xC4\x00\xC4\xC4\xC4\xC4\xC4\x00\xFF\xFF\xFF"
    DB  "\xFF\xFF\xFF\x00\xC4\xC4\xC4\x00\xC4\xC4\x00\xC4\x00\xFF\xFF\xFF"
    DB  "\xFF\xFF\x00\xC4\xC4\xC4\xC4\xC4\x00\x00\x00\xC4\xC4\x00\xFF\xFF"
    DB  "\xFF\x00\xC4\xC4\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xC4\xC4\x00\xFF\xFF"
    DB  "\xFF\x00\xC4\xFF\x00\xFF\xFF\xFF\xFF\xFF\x00\xFF\xC4\x00\xFF\xFF"
    DB  "\xFF\x00\xC4\xFF\x00\xFF\xFF\xFF\xFF\xFF\x00\xFF\xC4\x00\xFF\xFF"
    DB  "\xFF\x00\xC4\xFF\xC4\xFF\xFF\xF4\xFF\xFF\xC4\xFF\xC4\x00\xFF\xFF"
    DB  "\xFF\xFF\x00\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x00\xFF\xFF\xFF"
    DB  "\xFF\xFF\xFF\x00\x00\x00\x00\x00\x00\x00\x00\x00\xFF\xFF\xFF\xFF"
    DB  "\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF"
    DB  "\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF"
    DB  "\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF"

boot:
	MOV SP, stackTop	; Set SP
	MOV C, hello		; Point register C to string
	MOV D, txtDisplay	; Point register D to output
	CALL print
	HLT				; Halt execution
    	MOV C, sprite		; C points to the sprite
	MOV D, vslDisplay	; D points to the fb

print:				; Print string
	PUSH A
	PUSH B
	MOV B, 0
.loop:
	MOVB AL, [C]	; Get character
	MOVB [D], AL	; Write to output
	INC C
	INC D
	CMPB BL, [C]	; Check if string terminator
    
	CMP D, 0x400
	JNZ .loop		; Jump back to loop if not

	POP B
	POP A
	RET
